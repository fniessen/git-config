[user]
    name = John Doe
    email = john.doe@example.com

[github]
    user = jdoe

[include]
    path = ~/.gitconfig_local

[alias]
    workprofile = config user.email \"john@work.com\"

[core]
    editor = emacsclient

    # git-grep to ignore ^M.
    pager = tr -d '\\r' | less -REX

    # whitespace = fix,-indent-with-non-tab,trailing-space,space-before-tab,cr-at-eol
    whitespace = cr-at-eol

    # Do filesystem operations in parallel to hide latency (default since v2.1).
    preloadindex = true

    # Fix UAC issues so you don't need to run Git as administrator (default since v2.8).
    fscache = true

[gc]
    # Minimize the number of files in .git/.
    auto = 256

[help]
    autocorrect = 1

[log]
    date = iso

[diff]
    renames = copies
    renameLimit = 30000

    algorithm = patience

    mnemonicprefix = true

    noprefix = true

    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[alias]
    showtool = "!f() { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; f"

    diff-file-last-commit = "!f() { \
            project_root_dir=$(git root); \
            echo finding full file path of $1 in $project_root_dir; \
            filepath=$(find $project_root_dir -type f -name $1); \
            echo full file path $filepath; \
            last_modified_commit_hash=$(git rev-list -1 HEAD $filepath); \
            echo last commit file modified $last_modified_commit_hash; \
            git difftool $last_modified_commit_hash^ $filepath; \
        }; f"

[alias]
    diffall = difftool -t meld --dir-diff

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[status]
    submoduleSummary = true

[pull]
    rebase = true

[push]
    default = simple

[merge]
    stat = true
    summary = true

    # Include summaries of merged commits in newly created merge commit messages.
    log = true

    conflictstyle = diff3

    tool = meld

[mergetool "meld"]
    cmd = meld --diff "$LOCAL" "$MERGED" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    # cmd = meld --diff "$LOCAL" "$BASE" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    keepBackup = false

[rebase]
    stat = true

[grep]
    lineNumber = true

    # # Allow extended regular expressions
    # extendedRegexp = true

    fullName = true

[color]
    ui = auto
    branch = auto
    diff = auto
    status = auto
    interactive = auto

[color "branch"]
    current = cyan bold
    local = green bold
    remote = red bold
    upstream = red bold
    plain = yellow reverse

[color "diff"]
    plain = "#888888"
    meta = yellow bold
    frag = magenta bold
    func = "#cc99cc"
    old = red bold
    new = green bold
    commit = yellow
    whitespace = red reverse

[color "status"]
    header = normal
    added = green bold
    changed = yellow bold
    untracked = cyan
    branch = cyan bold
    nobranch = bold ul blink 12
    unmerged = red reverse bold

[color "grep"]
    context = "#888888"
    filename = yellow bold
    function = red
    linenumber = magenta bold
    match = green reverse bold
    matchContext = yellow reverse bold
    matchSelected = yellow bold blue
    separator = red bold
    selected = white

[alias]
    # Proxy.
    setproxy = !git config --global http.proxy http://proxy-guest.forem.be:8080 && git config --global https.proxy https://proxy-guest.forem.be:8080
    rmvproxy = !git config --global --unset http.proxy && git config --global --unset https.proxy

[format]
    pretty = format:%C(yellow)%h%C(reset) %C(green)%ad%C(auto)%d%C(reset) %s %C(blue)<%an>%C(reset)


# https://dev.to/megamattmiller/the-git-aliases-that-get-me-to-friday-1cmj
[custom.formats]
    ls   = "[%C(auto,yellow)%<|(10)%h%C(reset)] [%C(auto,bold blue)%<(15trunc)%cn%C(reset)]  %C(auto)%d% C(reset)%s"
    find = "[%C(yellow)%<|(20)%h%C(reset)] [%C(bold blue)%<(10)%cn%C(reset)]  %C(auto)%d %C(reset)  %s"
    graph="%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)%n %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)"

[alias]

    alias = "!git config -l | grep alias | cut -c 7- | sort"

    # Useful for exploring Git.
    type = cat-file -t
    dump = cat-file -p

     catchup = !git fetch; git rebase origin/master
# For catching up those random feature branches you haven't had to touch in months.

    exec = '!exec '

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number' shows the diff between the state `$number' revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Interactive rebase with the given number of latest commits
    ireb = "!r() { git rebase -i HEAD~$1; }; r"

    # Starts an interactive rebase of all the commits you haven't pushed
    # yet. Handy for collapsing a bunch of work-in-progress snapshots into
    # logical commits before pushing, without having to worry about accidentally
    # squashing a commit someone else has already referred to.
    work-in-progress = rebase -i @{u}

#BASIC HISTORY VIEWING

    hist = log --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset%C(yellow)%d%Creset %Cgreen(%cr)%Creset%n%w(80,8,8)%s' --graph
    histfull = log --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset%C(yellow)%d%Creset %Cgreen(%cr)%Creset%n%w(80,8,8)%s%n' --graph --name-status
    llog = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=iso
    changelog = log --pretty=format:'%Cgreen%d %Creset%s' --date=iso
    ls = log --pretty=format:'%C(yellow)%p..%h %C(white dim)%cd %<|(49,trunc)%an %C(reset)%s' --date=short --abbrev=8 --no-merges

#BASIC REPO INFORMATION

    whois = "!sh -c 'git log -i -1 --pretty=\"format::%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat::%h (%s, %ad)' --date=short

#WHAT WAS GOING ON, WHILE YOU WERE AWAY

    anychanges = !sh -c 'git fetch' && git log --oneline HEAD..origin/$1
    anychangesonmaster = !sh -c 'git fetch' && git log --oneline HEAD..origin/master
    whoischanging = !sh -c 'git shortlog HEAD..origin/$0'
    whoischangingmaster = !sh -c 'git shortlog HEAD..origin/master'

    #what branches you have on origin, with info on who is guilty and how long ago. Useful for gitflow and feature branches in general. Requires fetch up-front.
    showorigin = "!sh -c 'for branch in `git branch -r | grep -v HEAD`;do echo `git show -s --format=\"%Cred%ci %C(green)%h %C(yellow)%cr %C(magenta)%an %C(blue)\" $branch | head -n 1` \\\t$branch; done | sort -r'"

    #get remote branches
    trackallbranches = !sh -c "for branchname in `git branch -r `; do git branch --track $branchname; done"
    updateallbranches = !sh -c "for branchname in `git branch -r `; do git checkout $branchname ; git pull; done"

#TAGS

    showtags = show-ref --tags
    pushtags = push --tags
    tagwithdate = !sh -c 'git tag "$0"_$(date "+%y-%m-%d_%H-%M-%S")'
    # Pushes given tag to remote 'origin' repo (or the remote passed as the second parameter)
    publishtag = "!sh -c 'git push ${2:-origin} $1' -"
    # Removes given tag from remote 'origin' repo (or the remote passed as the second parameter)
    unpublishtag = "!sh -c 'git push ${2:-origin} :refs/tags/$1' -"

#IGNORING

    # fix .gitignore
    fixgitignore = !git rm -r --cached . && git add . && git commit -m \"Just a .gitignore fix \"

    # Ignore files only locally
    hide = update-index --assume-unchanged
    unhide = update-index --no-assume-unchanged

#OTHER

    #Deletes all branches that were safely merged into the master. All other are skipped (no worries).
    #on osx xargs does not have -r argument, so it fail. If you remove -r, it will run at least once, making this not safe operation
    cleanup = !git branch --merged=master | grep -Ev '^\\* | master$' | xargs -r git branch -d

    #Deletes orphaned remote branches (.git/refs/remotes/origin), clean up reflog and remove all untracked files
    cleanuplocal = !git remote prune origin && git gc && git clean -df

    # Check if any file in repo has whitespace errors
    # As described in http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/
    check-whitespace = diff-tree --check $(git hash-object -t tree /dev/null) HEAD

    # Check if any file in repo has windows line endings
    #Currently do not work as alias, works from comand line directly. There is a problem with \r
    check-eol = grep --files-with-matches $'\\r' HEAD

    #Jira tickets (from: http://blogs.atlassian.com/2014/08/whats-new-git-2-1/)
    issues = "!f() { : git log ; echo 'Printing issue keys'; git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq; }; f"

    st = status -s -b

    df = diff

    # Ignore whitespace changes.
    wdiff = diff -b
    wdiff = diff --word-diff

    dw = diff --word-diff

    # Configure git-diff to produce the absolutely most minimal diff possible.
    wdiff = diff -w --word-diff-regex=. --color-words -U0

    # Diff line-wise
    d = diff

    # Diff word-wise
    dw = diff --color-words

    # Diff character-wise
    dt = diff --word-diff-regex=.

    # Review staged changes (about to be committed).
    dc = diff --cached

    # Diff staged line-wise
    ds = diff --cached

    # Diff staged word-wise
    dws = diff --color-words --cached

    # Diff staged character-wise
    dts = diff --word-diff-regex=. --cached

    precommit = diff --cached --diff-algorithm=minimal -w

    today = log --since=midnight --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'
    yesterday = log --since='1 day ago midnight' --until=midnight --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'
    this-week = log --since=1.weeks --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'

    today-all = log --since=midnight --no-merges --all

    today2 = !git log --all --since=00:00:00 --oneline --no-merges --author=${1-$(git config user.email)}
    changelog2 = !git log --oneline --no-merges ${1-$(git describe --abbrev=0)}..HEAD
    upstream = !git log --oneline --no-merges HEAD..${1-$(git branch -lvv | perl -ne '/^\\*.*\\[(.*?)\\]/ and print "$1\n"')}
    local = !git log --oneline --no-merges ${1-$(git branch -lvv | perl -ne '/^\\*.*\\[(.*?)\\]/ and print "$1\n"')}..HEAD

    # Summarize your own changes since 24h, suitable for a daily standup meeting.
    log-standup = log --since=yesterday --author=\"$(git config user.email)\" --pretty=short

    standup = "!git log --branches \
                        --since=$(if [[ "$(date +%a)" == "Mon" ]]; then \
                                      echo "friday"; \
                                  else \
                                      echo "yesterday"; \
                                  fi) \
                        --author=$(git config --get user.email) \
                        --format=format:'%C(green) %ad %C(yellow)%h %Creset %s %C(green bold)%d' \
                        --date=local"
# XXX git standup W donne un décompte avec une ligne trop peu !

  # Show log of new commits after you fetched, with stats, excluding merges
  log-fresh = log ORIG_HEAD.. --stat --no-merges

  # Show the log for my own user email
  log-me = !git log --author=$(git config user.email)

    # When was this file last updated, on each local branch.
    wwflu = "!f() { for b in $(git rev-parse --symbolic --branches); do \
                        echo -e $(git log --format=%at:%ar -1 $b -- \"$1\")\\\\t$b; \
                    done | sort -r | cut -f2 -d:; }; f"

    stage-modified-removed-files = add -u

    ls = log --decorate --date=short
    ld = log --decorate --date=relative

    log = log --decorate --date=short

    ll = log --decorate --date=short --stat

    ls-modified  = "!git status --porcelain -uno | awk 'match($1, /M/) {print $2}'"
    ls-added     = "!git status --porcelain -uno | awk 'match($1, /A/) {print $2}'"
    ls-deleted   = "!git status --porcelain -uno | awk 'match($1, /D/) {print $2}'"
    ls-renamed   = "!git status --porcelain -uno | awk 'match($1, /R/) {print $2}'"
    ls-copied    = "!git status --porcelain -uno | awk 'match($1, /C/) {print $2}'"
    ls-updated   = "!git status --porcelain -uno | awk 'match($1, /U/) {print $2}'"
    ls-staged    = "!git status --porcelain -uno | grep -P '^[MA]' | awk '{ print $2 }'"

    ls-del  = ls-files -d
    ls-mod  = ls-files -m   # This will include deleted files also.
    ls-new  = ls-files --exclude-standard -o
    lsfiles = ls-files --exclude-per-directory=.gitignore \
                     --exclude-from=.git/info/exclude \
                     -v -d -o -m -s -u

    last = log --decorate -1 --date=short --stat

    # # Show the last N commits on the current branch.
    # last = !git log --name-status -${1:-1}

    file-history = log --follow --date-order --date=short -C --

    related = !sh -c 'git log --follow --format=format:%H $1 | xargs -L1 git diff-tree --no-commit-id --name-only -r | sort | uniq -c | sort -b -n -r'

    praise = blame -w
    archeology = blame -w -C -n
    whodoikill = blame -w -C -n

    status-all = "!for d in $(find . -name \".git\"); do \
                     echo \"\n*** Repository: $d ***\" \
                     && git --git-dir=$d --work-tree=$d/.. status | grep -q \"is ahead of\"; \
                   done"

    # List all tracked files.
    ls-tracked = ls-files -t

    tracked1 = "!f() { tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked (or No such file)'; else echo 'File tracked'; fi; }; f"

    tracked2 = "!f() { echo -n ${1}': '; if [[ -f ${1} ]]; then tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked'; else echo 'File tracked'; fi; else echo 'No such file!'; fi; }; f"
# does not work!?

    # List all untracked files.
    ls-untracked = ls-files --others

    # this one is a MUST have
    ls-ign  = ls-files --exclude-standard -o -i
    ls-ignored = ls-files --others --ignored --exclude-standard

    ignore = "!f() { echo \"$1\" >> \"${GIT_PREFIX}.gitignore\"; }; f"
    # ignore=!([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore
# XXX What is GIT_PREFIX?

    # Ignore all untracked files by appending them to .gitignore:
    ignore-untracked = "!git status | grep -P \"^\\t\" | grep -vF .gitignore | sed \"s/^\\t//\" >> .gitignore"

    skip = update-index --assume-unchanged
    unskip = update-index --no-assume-unchanged

    skip-all = "!git status -s | awk {'print $2'} | xargs git skip"

    unskip-all = "!git skipped | xargs git update-index --no-assume-unchanged"

    skipped = "!git ls-files -v | grep '^h' | cut -c 3-"
    skipped2 = !git ls-files -v | grep '^[a-z]'

    # Append your staged changes to the LATEST commit (keeping the pre-existing
    # commit message).
    fixup = commit -v --amend --reuse-message HEAD

    # Change LATEST commit message to what you type in.
    # Usage: git medit <msg>
    medit = commit --amend -m

    # Credit an author on the LATEST commit.
    # Usage: git credit <author-name> <author-email>
    credit = "!f() { git commit --amend --author=\"$1 <$2>\" --reuse-message HEAD; }; f"

    fixup2 = "!f() { TARGET=$(git rev-parse \"$1\"); \
                    git commit --fixup=$TARGET ${@:2} \
                        && GIT_EDITOR=true git rebase --interactive --autostash --autosquash $TARGET^; }; f"
    # See https://blog.filippo.io/git-fixup-amending-an-older-commit/

    # Keep the changes from the commit you want to undo.
    undo-soft = reset --soft HEAD~1
    uncommit = reset --soft HEAD~1

    undo-mixed = reset --mixed HEAD~1
    uncommit-unstage = reset --mixed HEAD~1

    # Erase any changes since your last commit (reset every file in your working
    # directory to its committed state).
    # Destroy the changes from the commit you want to undo.
    undo = reset --hard HEAD~1
    # Delete last commit.

    nuke-untracked-files = clean -f

    clear-soft-dry-run = clean -d -n

    # THIS COMMAND MAY DELETE FILES THAT CANNOT BE RECOVERED.
    # Files and directories in .gitignore will be preserved.
    clear-soft = !git clean -d -f \
                      && git reset --hard
    # Discard current changes and throw out new files.

    # THIS COMMAND MAY DELETE FILES THAT CANNOT BE RECOVERED,
    # including those in .gitignore.
    clear = !git clean -d -f -x \
                 && git reset --hard

    squash = "!f() { git reset --soft HEAD~${1} && \
                     git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; }; f"

  # Given a merge commit, find the span of commits that exist(ed).
  # Not so useful in itself, but used by other aliases.
  # Thanks to Rob Miller for the merge-span-* aliaes.
  merge-span = !"f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

  # Find the commits that were introduced by a merge
  merge-span-log = "!git log `git merge-span .. $1`"

  # Show the changes that were introduced by a merge
  merge-span-diff = !"git diff `git merge-span ... $1`"

  # Show the changes that were introduced by a merge, in your difftool
  merge-span-difftool = !"git difftool `git merge-span ... $1`"

    remotes = remote
    r = remote -v

    in = !(echo "Please fetch origin before." && git log --decorate ..@{u})
    inf = !(git remote update -p              && git log --decorate ..@{u})

    in-stat = log --stat ..@{u}

    in-what = diff --stat ...@{u}

    du = diff @{u} HEAD
    # diff with upstream branch

    pull = pull -v

    # up = "!git stash && git pull && git stash pop"

    pull-autostash = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash push -m "autostash" && git pull && git stash pop
# XXX Does not work in WSL (unexpected operator [[)

    up = pull --rebase --autostash
    up = !git fetch && git rebase --autostash FETCH_HEAD
    up= "!git fetch origin && git branch -v -a"

    f = !git fetch --all && git rebase origin/master

    up-tmpname = "!f() { git remote update -p; git merge --ff-only @{u}; }; f"

    # Rebasing non-linear changes (when the fast-forward merge is not possible).
    upr = "!f() { git remote update -p; git rebase -p @{u}; }; f"

# cleanpull
# update (like svn? if we add a git reset in front?)
# sync

    # Get everything new.
    update = !git pull                     && git submodule update --init --recursive
    get    = !git pull --rebase            && git submodule update --init --recursive
    update = !git pull --rebase --prune $@ && git submodule update --init --recursive

  # Do a push/pull for just one branch
  push1 = "!git push origin $(git current-branch)"
  pull1 = "!git pull origin $(git current-branch)"

# Pull and push from the current branch
sync = "!f(){ pull1 && push1; }; f"

    pull-all = !"old=$(git current-branch); \
                 for b in $(git for-each-ref refs/heads --format='%(refname)'); do \
                     git checkout ${b#refs/heads/}; \
                     git pull --ff-only; \
                 done; \
                 git checkout ${old}"

    # For the latest pull (even if there's nothing new).
    last-pulled = !stat -c %y $(git root)/.git/FETCH_HEAD | cut -d'.' -f1

    # For the latest pull resulting in changes coming in from the remote master
    # branch (the timestamp won't change when git pull reports there are no
    # changes).
    last-updated = !stat -c %y $(git root)/.git/refs/heads/$(git current-branch) | cut -d'.' -f1

    # Will only try to "merge" if your current HEAD commit is in the branch
    # you're merging in.  This will allow you to merge some commits whilst being
    # sure you won't get conflicts.
    mff = merge --ff-only
    mff = merge --ff-only @{u}

    # Avoid a fast-forward commit.
    mnf = merge --no-ff

    cvsmerge = merge --no-ff --log

    # Merge remote master into the current branch.
    mm = !git fetch -p && git merge origin/master

    merge-to-master =  "!f(){ branch_name=\"$(git symbolic-ref HEAD 2>/dev/null)\" || branch_name=\"(unnamed branch)\"; branch_name=${branch_name##refs/heads/}; git checkout master && git merge $branch_name && git checkout $branch_name; };f"
    fork-from-master = "!f(){ git checkout master && git branch $1 && git checkout $1; };f"

    m = "!f() { local OLD=$(git current-branch); \
                git co \"$1\" && git pu && git merge $OLD && git p && git co $OLD; }; f"

    # Run merge test (before merge) to check for any conflicts beforehand.
    mergetest = "!f() { git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; }; f"

    # Check how the merge of `develop' into master will go:
    # git merge-dry-run develop
    merge-dry-run = "!f() { grep -q 'changed in both' <<< $(git merge-tree $(git merge-base FETCH_HEAD $1) FETCH_HEAD $1) \
                                && echo 'Merge conflicts!' \
                                || echo 'This branch can be automatically merged.'; }; f"
# DOESN'T work for git fetch & git merge

    # Extract the "changed in both" lines as well as the conflicting parts.
    merge-dry-run-conflicts = "!f() { git merge-tree $(git merge-base $1 $2) $1 $2 | sed -n '/+<<<<<<< .our/,/+>>>>>>> .their/p;/^changed in both/{n;N;N;s/^/#/mg;p}' | cdiff; }; f"

    ours   = "!f() { git checkout --ours   $@ && git add $@; }; f"

    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    conflicts = "!git ls-files -u | cut -f 2 | sort -u"

    conflicts = diff --name-only --diff-filter=U
    unmerged = diff --name-only --diff-filter=U

    # Create a feature branch.
    feature = "!f() { git create-branch feature/$1 develop; }; f"
    # XXX or feature-start?

    # Incorporate a finished feature on develop.
    feature-finish = "!f() { git checkout develop; \
                             git merge --no-ff feature/$1 \
                             && git delete-local-branch feature/$1; }; f"

    # XXX Also bug and refactor.

    # XXX release-start
    # XXX release-finish

    # Shortcut for checkout.
    co = checkout

    next = "!f() { git checkout $(git rev-list --topo-order HEAD..master | tail -1; }; f"

missing = "!f() { git rev-list ..$1 --oneline | sed -e '1 iOnly in other:'; git rev-list $1.. --oneline | sed -e '1 iOnly in HEAD:'; }; f"

    # "show-branch -g=N" can't be aliased for N easily, so we stop here:
    sb  = show-branch
    # pg sbt master pu -- if the last line is 'master' and not 'master^'
    # or 'master~N' then pu is a descendent of master
    sbt = show-branch --topics
    sbs = show-branch --sha1-name

    spush = stash push

    sshow = "!f() { git stash show stash^{/$@} -p; }; f" # Like sapply but shows it only

    sapply = "!f() { git stash apply stash^{/$@}; }; f" # Find stash with name like text

    spop = "!f() { git stash pop stash@{$(git stash-id $@)}; }; f" # Like sapply but pops it off

    stash-id = "!f() { git stash list | grep $@ | head -n 1 | sed -n 's/stash@{\\(.*\\)}.*/\\1/p'; }; f" # only accepts single word, no quotations

stashall = !git add -A && git stash
# "Add" modified files, deleted files, and new untracked files.

    hide = stash push --include-untracked # Hide all files, including untracked files (faster than using --all).

    snapshot = !git stash push -m "snapshot-$(date +%Y%m%d_%H%M)" \
                    && git stash apply "stash@{0}"

    # checkpoint
    cp = !git stash push -m "$(date +%F--%T)" && git stash pop --index

    # checkpoint recover
    cpr = "!f() { git fsck | grep commit | cut -d' ' -f3 | \
                  while read hash; do \
                      git rev-parse --verify --no-revs --quiet $hash^2 2>/dev/null && echo $hash | xargs git rev-list --since=${1:-1day} -1; \
                  done | xargs -L 1 git log --format=%at:%h -1 | sort | cut -f2 -d: | xargs -L 1 git log --graph --oneline --format='%Cblue%h %Cgreen(%ar) %Creset%s' -3; }; f"

    stashes = stash list --date=local

    stash-diff = stash show -p

    sshow = "!f() { git stash show stash^{/$*} -p; }; f"

    sshno = stash show --name-only

    sa = stash apply

    sapply = "!f() { git stash apply stash^{/$*}; }; f"

    stash-unapply = !git stash show -p --no-textconv --binary | git apply -R

    sp = stash pop

    std = stash drop

    # Unpushed.
    out = log --date=short @{u}..
    out-stat = log --stat --date=short @{u}..

    outgoing = log --branches --not --remotes --decorate

    # Get the upstream branch name.
    upstream-name = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)

    sha1-tag = "!f() { git name-rev --name-only \"$@\"; }; f"

    lll = log -u

    # Apply a patch to files and/or to the index from URL.
    apply-url = "!f() { curl -s $1 2>nul | git apply ${@:2}; }; f"

    # Apply a series of patches from an URL.
    am-url = "!f() { curl -s $1 2>nul | git am ${@:2}; }; f"

    # Interactive apply patch.
    ipatch = "!f() { git apply $1; git add -p; }; f"

    # Detailed list of changes.
    changelog = !sh -c 'git log --no-merges --pretty=format:\"* %s\" $(git last-tag)...' -
    changelog-org = !sh -c 'git log --no-merges --pretty=format:\"- %s\" $(git last-tag)...' -

    current-tag = tag --points-at HEAD
    zip = "!f() { git archive --format=zip -o $(git current-tag).zip HEAD; }; f"

    export-branch = !git format-patch --stdout $1 > ~/$(git current-branch).diff

    export-zip = archive -o latest.zip
    export-tgz = archive -o latest.tar.gz -9

    oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    branch-diff = '!sh -c "git diff $(git oldest-ancestor).."'
    branch-log = '!sh -c "git log $(git oldest-ancestor).."'

    diverges = !sh -c 'git rev-list --boundary "${1:-HEAD}"..."${2:-master}" | grep "^-" | cut -c2-'

    # Best common ancestor (when it was branched off).
    mbase = !git show --summary $(git merge-base origin/$1 $(git current-branch))
# git merge-base --fork-point master
# git merge-base --all r1 r2

    export-commit = "!f() { git changed-files ${1:-HEAD} | xargs zip -9 $(git repo-slug)-commit-${1:-HEAD}.zip; }; f"

    # View raw commit.
    email-patch = XXX git format-patch $(git current-branch).patch

    plain-diff = !git branch-diff > $(git current-branch).diff

    # le dernier tag, ainsi que la liste des commits ayant eu lieu depuis sur la
    # branche courante.
    unreleased = !git log --oneline $(git last-tag)...HEAD && git last-tag

    releases = log --decorate --no-merges --all --simplify-by-decoration --oneline --graph
    # XXX Add date

    show-tree = log --decorate --all --simplify-by-decoration --oneline --date=short --graph

    debug = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    cp = cherry-pick -x
    pick = cherry-pick -s

    # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
    cp = cherry-pick

    # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
    cp-nx = cherry-pick --no-commit -x

    h = help

    root = rev-parse --show-toplevel
    root-relative = rev-parse --show-prefix

    # Pull then push current branch.
    sync = !git pull && git push

    sync = !git update && git co master && git pull && git commit @{-1}

    # git resync -> sync repository and rebase current branch.
    resync = !sh -c 'git checkout master && git fetch && git reset --hard origin/master && git rebase master'

    record = !sh -c '(git add -p -- $@ && git commit) || git reset' --

    lost = "!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA: %C(yellow)%h%C(reset)  %s' --stdin | awk '/SHA/ {sub(\"SHA: \", \"\"); print}'"
    lost = "!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

zopa = !git log --graph --decorate --pretty=oneline --abbrev-commit --all $(git fsck --no-reflogs | grep commit | cut -d\\  -f3)

    logdate = log --format=format:'%ad %d %h %s %an%n' --date=short
    branch-date = !"sh -c 'for branch in $(git branch --no-merged); do \
                               git logdate -1 -r $branch --; \
                           done'"

    all = "!find . -type d -name .git -prune -execdir pwd ';' -execdir git $@ ';' #"

    print-reponame-then-run = "!f() { echo "======"; basename `git rev-parse --show-toplevel`; echo "======"; git "$@";}; f"

    # run commands for each repository in the current directory
    allr = "!f() { ls -R -d */.git | sed s,/.git,, | xargs -I{} git -C {} print-reponame-then-run "$@"; }; f"

    create-local-repository = !git init \
                                   && ( [[ -n $(ls) ]] || touch .gitignore ) \
                                   && git add . \
                                   && git commit -m \"Initial commit\"

    cl = clone --recursive

    username = "XXX"
    repo-slug = "!f() { git remote show origin -n \
                            | grep 'Fetch URL:' \
                            | sed -E 's#^.*/(.*)$#\\1#' \
                            | sed 's#.git$##'; }; f"

    browse-tree = "!f() { URL=$(git config --get remote.origin.url); open ${URL/.git}; }; f"
    browse-wiki = XXX
    browse-commits = XXX

    find-file = !git ls-tree -r --name-only HEAD | grep -i --color=auto

    find-file-all = "!f() { for branch in $(git for-each-ref --format=\"%(refname)\" refs/heads); do \
                            echo \"${branch}:\"; \
                                git ls-tree -r --name-only $branch | nl -bn -w3 | grep --color=auto \"$1\"; \
                            done; }; f"

    search-code = "grep -i --line-number --break --heading -C 1"

# ack = '-c color.grep.linenumber="bold yellow"
#     -c color.grep.filename="bold green"
#     -c color.grep.match="reverse yellow"
#     grep --break --heading --line-number'

    search-code-in-extension = "XXX"

    search-code-in-path = "XXX"

# In all commits, not in all branches!!! Lots of duplicates!!!
grep-all = "!f() { git rev-list --all | xargs git grep $1; }; f"

    # `-I' = Don't match the pattern in binary files.
    g = "grep -I"

    # Name only.
    gno = "grep -I --files-with-matches"

    unmodify = checkout --
    undelete = checkout --

    unstage = reset HEAD --
    unadd = reset HEAD --

    # Shortcut for commit.
    ci = commit

[commit]
    template = ~/.git_commit_template.txt

[alias]

    changed-files = show --pretty="format:" --name-only

    download-email-patch = XXX git format-patch $(git current-branch).patch
    download-plain-diff = !git branch-diff > $(git current-branch).diff

    # Print only refs which contain the commit.
    # Usage: git where <rev>
    where1 = for-each-ref --contains
    where2 = "!f() { git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' --contains $1 \
                         | sort -k5n -k2M -k3n -k4n ; }; f"
    # git for-each-ref --format='%(color:blue)%(refname)%(color:reset)' --contains 4ec324ff

    # Find branches containing commit.
    branches-that-contain = "branch -a --contains"

    # Find tags containing commit.
    tags-that-contain1 = tag --contains
    tags-that-contain2 = "!f() { git describe --always --contains $1; }; f"

    findc1 = "log --decorate -i --all --date=short --grep"
    findc2 = "!f() { git log --decorate --grep=$1 -i --all --date=short; }; f"

    # Search for commits (Filter by commit message).
    search-commits = "!f() { str=\"git log --all-match\"; \
                             for var in \"$@\"; do \
                                 str=\"$str --grep '$var'\"; \
                             done; \
                             eval $str; }; f"

    search = "!f() { for l in \"$@\"; do git log --grep \"$l\"; done; }; f"
# XXX Add i, all, date short...

    search2 = "!f() { git log --grep \"$1\" $(git rev-list --all); }; f"

    search-author = "log --decorate -i --all --date=short --author"
    recap = !git log --all --oneline --no-merges --author=${1-$(git config user.email)}

    whatwhen = log --decorate --date=short -p -S

    # Find commits by source code.
    search-commits-contents = "!f() { git log --decorate --date=short -S $1; }; f"
# XXX Does not work for strings with spaces in them...

    grep4d = !sh -c 'git log -p -S'$1' $2' -
# Not the best example, but: git grep4d CLOSED '*.java'

    create-branch = checkout -b

    # Push current branch to remote server (create a copy of the current branch
    # on the remote "origin", and set it to track the upstream branch).
    publish = !git push -u origin $(git current-branch)

    # Delete current branch on remote server.
    unpublish = !git delete-remote-branch $(git current-branch)

    # Get the current branch name (not so useful in itself, but used in other
    # aliases).  Works well in detached mode.
    current-branch = name-rev --name-only HEAD
    # current-branch = branch --show-current # v2.22+

    # Show local and remote branches.
    branches = branch -a -vv

    be = branch --edit-description

    track = for-each-ref --format='%(refname:short) <- %(upstream:short)' refs/heads

    # Show info for branches which have been checked out locally...
    br = for-each-ref \
             --sort=-committerdate refs/heads/ \
             --format='  %(color:green)%(committerdate:short)%(color:reset) %(HEAD) %(color:green bold)%(refname:short)%(color:reset) %(color:red bold)%(upstream:track)%(color:reset) %(color:yellow)%(objectname:short)%(color:reset) %(contents:subject) %(color:blue)<%(authorname)>%(color:reset)'

    recent = for-each-ref \
                 --sort=-committerdate refs/heads/ \
                 --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset))'

    # Sort by date for branches; can be useful for spring cleaning
    refs-by-date = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

    branches-merged = "!f() { git branch --merged | grep -v '\\*'; }; f"

    master = checkout master
    develop = checkout develop

    # Politely ask Git to delete a local branch.
    delete-local-branch = branch -d

    # Clean up.
    delete-merged-branches = "!f() { git branch --no-color --merged | grep -v '\\*' | \
                                     egrep -v \"(master|develop)\" | \
                                     xargs -n 1 git delete-local-branch; }; f"

    # # https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged
    # sweep = '!git branch --merged $([[ $1 != "-f" ]] && git rev-parse master) | \
    #           egrep -v "(^\*|^\s*(master|develop)$)" | \
    #           xargs git branch -d'

    delete-merged-remote-branches = "XXX"

    # Delete remote branch.
    delete-remote-branch = push origin --delete

    nuke-branch = "!f() { git delete-local-branch $1 \
                              && git delete-remote-branch $1; }; f"

    # Prune deleted branches from all remotes.
    prune-all = !git remote | xargs -n 1 git remote prune
    # 'git remote prune' does not understand '--all'.

    # There's no way to tell git remote update to prune orphaned branches?

    prune-local-branches = "!f() { git branch -vv | grep ': gone]' | \
                                   awk '{print $1}' | \
                                   xargs git delete-local-branch; }; f"

    rename-local-branch = branch -m

    rename-branch = "!f() { git rename-local-branch $1 $2 \
                                && git push --set-upstream origin $2 \
                                && git delete-remote-branch $1; }; f"

    # Show verbose output about tags.
    tags = tag -l --sort=v:refname -n1

    last-tag = describe --tags --abbrev=0
    checkout-last-tag = !sh -c 'git checkout $(git last-tag)'

    last-tagged = !git describe --tags $(git rev-list --tags --max-count=1)

    # Rename a tag (locally and remotely).
    rename-tag = "!f() { git tag $2 $1; \
                         git tag -d $1; \
                         git push origin $2; \
                         git push origin :refs/tags/$1; \
                       }; f"

    # Delete local and remote tags.
    delete-tag = "!f() { [ -z ${1} ] \
                         && echo \"No tags given as an argument!\" \
                         || (git tag -l ${1} | \
                             xargs -I % echo \"git tag -d % \
                                            && git push --delete origin %\" | \
                             sh); \
                       }; f"

    # Usage: git compare-commits <rev-base> <rev-compare>
    compare-commits = "!f() { git log --date=short $1...$2; }; f"

    # Show commits that haven't made it to master yet.
    ahead-of-master = log --oneline origin/master..HEAD

    # Show changed files (with stat about line additions and line deletions)
    # between two commits.
    # Usage: git compare-changed-files <rev-base> <rev-compare>
    compare-changed-files = "!f() { git diff --stat $1...$2; }; f"

    # Example: git compare master@{1day} master
    # (git compare <rev-base> <rev-compare> = git diff <rev-base>...<rev-compare>)
    compare = "!f() { git diff $1...$2; }; f"
    # https://github.com/fniessen/git-config/compare/master@%7B1day%7D...master

    log-local = log --oneline origin..HEAD

    log-fetched = log --oneline HEAD..origin

    divergence = log --left-right --graph --cherry-pick --oneline $1...origin/$1

    # log since master.
    missing-master = log master...

    # diff since master.
    missing-master-diff = diff master...

    release = "!f() { git tag -a v$1 -m \"Release version $1\" \
                          && git push origin --tags \
                          && git push origin; }; f"

    contributors = shortlog -n -s --no-merges --
    contributors-email = shortlog -n -s -e --no-merges --

    graph = log --graph -25 --branches --remotes --tags --format=format:'%C(yellow)%h %C(reset) %<(75,trunc)%s <%cn> (%cr) %C(red)%d' --date-order

    # Show log as a graph
    log-graph = log --graph --all --oneline --decorate

    hist = log --date=short --graph

    graphviz = "!f() { echo 'digraph git {' ; \
                           git log -25 --pretty='format:  %h -> { %p }' \"$@\" \
                               | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; \
                       echo '}'; }; f"

    pull-request-bb = "!f() { username=$1; repo_slug=$2; \
        curl --user $username \
            https://bitbucket.org/fniessen/$(git repo-slug)/pull-requests/new?source=$(git current-branch)&t=1; }; f"

    pr-list = XXX

    # For GitHub.
    pr-checkout-gh = "!f() { git fetch origin pull/$1/head:pr/$1 \
                                 && git checkout pr/$1; }; f"
    # https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally

    # For GitLab.
    pr-checkout-gl = "!f() { git fetch origin merge-requests/$1/head:pr/$1 \
                                 && git checkout pr/$1; }; f"
    # https://about.gitlab.com/blog/2016/12/08/git-tips-and-tricks/#add-an-alias-to-checkout-merge-requests-locally

    # For GitHub.
    mpr = "!f() { \
            declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
            declare branch=\"${2:-$currentBranch}\"; \
            if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                git fetch origin refs/pull/$1/head:pr/$1 && \
                git checkout -B $branch && \
                git rebase $branch pr/$1 && \
                git checkout -B $branch && \
                git merge --ff-only pr/$1 && \
                git delete-local-branch pr/$1; \
            fi \
        }; f"

    # merges given pull request into the current branch
    # the commit message will have the same for as if done using the
    # merge button on github.com
    #
    # git merge-pr origin 5
    merge-pr = "!sh -c '\
        user_and_repo=`git remote show $1 | grep \"Fetch URL\" | sed -E \"s/.*github.com[:\\/]([a-zA-Z_\\-]+)\\/([a-zA-Z_\\-]+)\\.git$/\\1 \\2/\"`; \
        user=`echo $user_and_repo | cut -d\" \" -f1`; \
        repo=`echo $user_and_repo | cut -d\" \" -f2`; \
        tmpfile=`mktemp`; \
        curl -si https://api.github.com/repos/$user/$repo/pulls/$2 > $tmpfile; \
        pull_author=`cat $tmpfile | awk \"{if (/ *\\\"head\\\"/) head=\\\\$1; if (/ *\\\"login\\\": \\\"/) value=\\\\$2}{if (head && value) print value; if (head && value) exit}\" | sed -E \"s/\\\"([^\\\"]+)\\\".*/\\1/\"`; \
        pull_ref=`cat $tmpfile | awk \"{if (/ *\\\"head\\\"/) head=\\\\$1; if (/ *\\\"ref\\\": \\\"/) label=\\\\$2}{if (head && label) print label; if (head && label) exit}\" | sed -E \"s/\\\"([^\\\"]+)\\\".*/\\1/\"`; \
        pull_title=`cat $tmpfile | grep \"\\\"title\\\": \" | sed \"s/^ *\\\"title\\\": \\\"//\" | sed \"s/\\\",$//\"`; \
        rm $tmpfile; \
        git fetch $1 pull/$2/head; \
        git merge --no-ff -m \"Merged pull request #$2 from $pull_author/$pull_ref\n\n$pull_title\" FETCH_HEAD; \
        ' -"

    pr-clean = "!f() { git delete-local-branch pr/$1; }; f"

    pr-show = XXX <pr-number>

    related-pr-of-commit = "! sh -c 'git log $1..master --ancestry-path --merges --oneline | tail -n1 ' -"

rsync-deploy =

# Deploy a branch to review server (https://review-feature-1.example.com).
deploy-review =

# Deploy master to staging server (https://staging.example.com).
deploy-staging =

# Deploy master to production server (https://example.com).
deploy-prod =

  # # Deploy
  # staging = !git push heroku-staging $(git current-branch):master -f && git track 'Deployed to staging ' # push current branch to staging, can add more comments after
  # dev = !git push heroku-dev $(git current-branch):master -f && git track 'Deployed to dev ' # push current branch to dev
  # deploy = !git push heroku $(git current-branch):master -f && git track 'Deployed to production ' # push current branch to production

# shipit = push heroku master

 # deploy='git push production master && terminal-notifier-notify -title "Deploy" -message "Deploy complete"'
 # stage='git push staging $(git current-branch):master'

# title
# description
# assignee
# kind
# priority
    create-issue = XXX

    create-issue-pull-request = XXX

    issues = "!f() { username=$1; \
        curl --user $username \
            https://api.bitbucket.org/2.0/repositories/$username/$(git repo-slug)/issues \
            | jq --compact-output '.values | .[] | [.id, .title, .type, .priority, .state, .votes, .assignee.display_name, .created_on, .updated_on]' \
            | sed \"s#\"open\"#$(tput setaf 2)&$(tput sgr0)#\"; }; f"
# --data-urlencode 'priority >= \"major\"'

    issues-open = XXX

    issues-assigned-to-me = XXX

    issues-created-by-me = XXX

    show-issue = XXX

    browse-issues = "!f() { URL=$(git config --get remote.origin.url); open ${URL/.git}/issues/$1; }; f"

    # Put everything in the current repo in a Zip archive.
    download-repository = "!f() { git archive ${1:-HEAD} --format=zip \
                                      -o $(basename $(git root))-commit-$(git rev-parse ${1:-HEAD}).zip; }; f"
# XXX Test it with tag or branch.

    serve = "daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/"
    serve = "-c daemon.receivepack=true daemon --base-path=. --export-all --reuseaddr --verbose"
